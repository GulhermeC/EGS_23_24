# coding: utf-8

"""
    Prison Guard Scheduling API

    This API manages the schedules of prison guards, ensuring a guard cannot be scheduled to be in two places at the same time. It supports querying schedules by guard ID and location name.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SchedulesSwitchBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schedule_id': 'str',
        'guard_id_from': 'str',
        'guard_id_to': 'str'
    }

    attribute_map = {
        'schedule_id': 'scheduleId',
        'guard_id_from': 'guardIdFrom',
        'guard_id_to': 'guardIdTo'
    }

    def __init__(self, schedule_id=None, guard_id_from=None, guard_id_to=None):  # noqa: E501
        """SchedulesSwitchBody - a model defined in Swagger"""  # noqa: E501
        self._schedule_id = None
        self._guard_id_from = None
        self._guard_id_to = None
        self.discriminator = None
        self.schedule_id = schedule_id
        self.guard_id_from = guard_id_from
        self.guard_id_to = guard_id_to

    @property
    def schedule_id(self):
        """Gets the schedule_id of this SchedulesSwitchBody.  # noqa: E501

        The ID of the schedule to be switched.  # noqa: E501

        :return: The schedule_id of this SchedulesSwitchBody.  # noqa: E501
        :rtype: str
        """
        return self._schedule_id

    @schedule_id.setter
    def schedule_id(self, schedule_id):
        """Sets the schedule_id of this SchedulesSwitchBody.

        The ID of the schedule to be switched.  # noqa: E501

        :param schedule_id: The schedule_id of this SchedulesSwitchBody.  # noqa: E501
        :type: str
        """
        if schedule_id is None:
            raise ValueError("Invalid value for `schedule_id`, must not be `None`")  # noqa: E501

        self._schedule_id = schedule_id

    @property
    def guard_id_from(self):
        """Gets the guard_id_from of this SchedulesSwitchBody.  # noqa: E501

        The ID of the guard currently assigned to the schedule.  # noqa: E501

        :return: The guard_id_from of this SchedulesSwitchBody.  # noqa: E501
        :rtype: str
        """
        return self._guard_id_from

    @guard_id_from.setter
    def guard_id_from(self, guard_id_from):
        """Sets the guard_id_from of this SchedulesSwitchBody.

        The ID of the guard currently assigned to the schedule.  # noqa: E501

        :param guard_id_from: The guard_id_from of this SchedulesSwitchBody.  # noqa: E501
        :type: str
        """
        if guard_id_from is None:
            raise ValueError("Invalid value for `guard_id_from`, must not be `None`")  # noqa: E501

        self._guard_id_from = guard_id_from

    @property
    def guard_id_to(self):
        """Gets the guard_id_to of this SchedulesSwitchBody.  # noqa: E501

        The ID of the guard to whom the schedule will be reassigned.  # noqa: E501

        :return: The guard_id_to of this SchedulesSwitchBody.  # noqa: E501
        :rtype: str
        """
        return self._guard_id_to

    @guard_id_to.setter
    def guard_id_to(self, guard_id_to):
        """Sets the guard_id_to of this SchedulesSwitchBody.

        The ID of the guard to whom the schedule will be reassigned.  # noqa: E501

        :param guard_id_to: The guard_id_to of this SchedulesSwitchBody.  # noqa: E501
        :type: str
        """
        if guard_id_to is None:
            raise ValueError("Invalid value for `guard_id_to`, must not be `None`")  # noqa: E501

        self._guard_id_to = guard_id_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchedulesSwitchBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchedulesSwitchBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
